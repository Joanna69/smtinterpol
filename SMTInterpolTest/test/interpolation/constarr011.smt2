(set-option :produce-proofs true)
(set-option :proof-check-mode true)
(set-option :interpolant-check-mode true)
(set-option :print-terms-cse false)

(set-logic QF_AUFLIA)
(declare-sort U 0)
(declare-fun u1 () U)
(declare-fun u2 () U)
(declare-fun u3 () U)
(declare-fun u4 () U)
(declare-fun u5 () U)
(declare-fun u6 () U)
(declare-fun v () U)
(declare-fun w () U)
(declare-fun k1 () U)
(declare-fun k2 () U)
(declare-fun k3 () U)
(declare-fun k4 () U)
(declare-fun k5 () U)
(declare-fun k6 () U)
(declare-fun s1 () (Array U U))
(declare-fun s2 () (Array U U))
(declare-fun s3 () (Array U U))
(declare-fun p (U) Bool)

(assert (! (and (p v) (= ((as const (Array U U)) v) (store s1 k1 u1))) :named P0))
(assert (! (= s3 (store (store s2 k3 u3) k4 u4)) :named P1))
(assert (! true :named P2))
(assert (! (and (not (p w)) (= ((as const (Array U U)) w) (store (store s3 k5 u5) k6 u6))) :named P3))
(assert (! (= s2 (store s1 k2 u2)) :named P4))

(check-sat)
(get-proof)
(get-interpolants P0 (P1) P2 (P3) P4)
(exit)
